/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/http-parser-js";
exports.ids = ["vendor-chunks/http-parser-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/http-parser-js/http-parser.js":
/*!****************************************************!*\
  !*** ./node_modules/http-parser-js/http-parser.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*jshint node:true */ var assert = __webpack_require__(/*! assert */ \"assert\");\nexports.HTTPParser = HTTPParser;\nfunction HTTPParser(type) {\n    assert.ok(type === HTTPParser.REQUEST || type === HTTPParser.RESPONSE || type === undefined);\n    if (type === undefined) {\n    // Node v12+\n    } else {\n        this.initialize(type);\n    }\n    this.maxHeaderSize = HTTPParser.maxHeaderSize;\n}\nHTTPParser.prototype.initialize = function(type, async_resource) {\n    assert.ok(type === HTTPParser.REQUEST || type === HTTPParser.RESPONSE);\n    this.type = type;\n    this.state = type + \"_LINE\";\n    this.info = {\n        headers: [],\n        upgrade: false\n    };\n    this.trailers = [];\n    this.line = \"\";\n    this.isChunked = false;\n    this.connection = \"\";\n    this.headerSize = 0; // for preventing too big headers\n    this.body_bytes = null;\n    this.isUserCall = false;\n    this.hadError = false;\n};\nHTTPParser.encoding = \"ascii\";\nHTTPParser.maxHeaderSize = 80 * 1024; // maxHeaderSize (in bytes) is configurable, but 80kb by default;\nHTTPParser.REQUEST = \"REQUEST\";\nHTTPParser.RESPONSE = \"RESPONSE\";\n// Note: *not* starting with kOnHeaders=0 line the Node parser, because any\n//   newly added constants (kOnTimeout in Node v12.19.0) will overwrite 0!\nvar kOnHeaders = HTTPParser.kOnHeaders = 1;\nvar kOnHeadersComplete = HTTPParser.kOnHeadersComplete = 2;\nvar kOnBody = HTTPParser.kOnBody = 3;\nvar kOnMessageComplete = HTTPParser.kOnMessageComplete = 4;\n// Some handler stubs, needed for compatibility\nHTTPParser.prototype[kOnHeaders] = HTTPParser.prototype[kOnHeadersComplete] = HTTPParser.prototype[kOnBody] = HTTPParser.prototype[kOnMessageComplete] = function() {};\nvar compatMode0_12 = true;\nObject.defineProperty(HTTPParser, \"kOnExecute\", {\n    get: function() {\n        // hack for backward compatibility\n        compatMode0_12 = false;\n        return 99;\n    }\n});\nvar methods = exports.methods = HTTPParser.methods = [\n    \"DELETE\",\n    \"GET\",\n    \"HEAD\",\n    \"POST\",\n    \"PUT\",\n    \"CONNECT\",\n    \"OPTIONS\",\n    \"TRACE\",\n    \"COPY\",\n    \"LOCK\",\n    \"MKCOL\",\n    \"MOVE\",\n    \"PROPFIND\",\n    \"PROPPATCH\",\n    \"SEARCH\",\n    \"UNLOCK\",\n    \"BIND\",\n    \"REBIND\",\n    \"UNBIND\",\n    \"ACL\",\n    \"REPORT\",\n    \"MKACTIVITY\",\n    \"CHECKOUT\",\n    \"MERGE\",\n    \"M-SEARCH\",\n    \"NOTIFY\",\n    \"SUBSCRIBE\",\n    \"UNSUBSCRIBE\",\n    \"PATCH\",\n    \"PURGE\",\n    \"MKCALENDAR\",\n    \"LINK\",\n    \"UNLINK\",\n    \"SOURCE\"\n];\nvar method_connect = methods.indexOf(\"CONNECT\");\nHTTPParser.prototype.reinitialize = HTTPParser;\nHTTPParser.prototype.close = HTTPParser.prototype.pause = HTTPParser.prototype.resume = HTTPParser.prototype.free = function() {};\nHTTPParser.prototype._compatMode0_11 = false;\nHTTPParser.prototype.getAsyncId = function() {\n    return 0;\n};\nvar headerState = {\n    REQUEST_LINE: true,\n    RESPONSE_LINE: true,\n    HEADER: true\n};\nHTTPParser.prototype.execute = function(chunk, start, length) {\n    if (!(this instanceof HTTPParser)) {\n        throw new TypeError(\"not a HTTPParser\");\n    }\n    // backward compat to node < 0.11.4\n    // Note: the start and length params were removed in newer version\n    start = start || 0;\n    length = typeof length === \"number\" ? length : chunk.length;\n    this.chunk = chunk;\n    this.offset = start;\n    var end = this.end = start + length;\n    try {\n        while(this.offset < end){\n            if (this[this.state]()) {\n                break;\n            }\n        }\n    } catch (err) {\n        if (this.isUserCall) {\n            throw err;\n        }\n        this.hadError = true;\n        return err;\n    }\n    this.chunk = null;\n    length = this.offset - start;\n    if (headerState[this.state]) {\n        this.headerSize += length;\n        if (this.headerSize > (this.maxHeaderSize || HTTPParser.maxHeaderSize)) {\n            return new Error(\"max header size exceeded\");\n        }\n    }\n    return length;\n};\nvar stateFinishAllowed = {\n    REQUEST_LINE: true,\n    RESPONSE_LINE: true,\n    BODY_RAW: true\n};\nHTTPParser.prototype.finish = function() {\n    if (this.hadError) {\n        return;\n    }\n    if (!stateFinishAllowed[this.state]) {\n        return new Error(\"invalid state for EOF\");\n    }\n    if (this.state === \"BODY_RAW\") {\n        this.userCall()(this[kOnMessageComplete]());\n    }\n};\n// These three methods are used for an internal speed optimization, and it also\n// works if theses are noops. Basically consume() asks us to read the bytes\n// ourselves, but if we don't do it we get them through execute().\nHTTPParser.prototype.consume = HTTPParser.prototype.unconsume = HTTPParser.prototype.getCurrentBuffer = function() {};\n//For correct error handling - see HTTPParser#execute\n//Usage: this.userCall()(userFunction('arg'));\nHTTPParser.prototype.userCall = function() {\n    this.isUserCall = true;\n    var self = this;\n    return function(ret) {\n        self.isUserCall = false;\n        return ret;\n    };\n};\nHTTPParser.prototype.nextRequest = function() {\n    this.userCall()(this[kOnMessageComplete]());\n    this.reinitialize(this.type);\n};\nHTTPParser.prototype.consumeLine = function() {\n    var end = this.end, chunk = this.chunk;\n    for(var i = this.offset; i < end; i++){\n        if (chunk[i] === 0x0a) {\n            var line = this.line + chunk.toString(HTTPParser.encoding, this.offset, i);\n            if (line.charAt(line.length - 1) === \"\\r\") {\n                line = line.substr(0, line.length - 1);\n            }\n            this.line = \"\";\n            this.offset = i + 1;\n            return line;\n        }\n    }\n    //line split over multiple chunks\n    this.line += chunk.toString(HTTPParser.encoding, this.offset, this.end);\n    this.offset = this.end;\n};\nvar headerExp = /^([^: \\t]+):[ \\t]*((?:.*[^ \\t])|)/;\nvar headerContinueExp = /^[ \\t]+(.*[^ \\t])/;\nHTTPParser.prototype.parseHeader = function(line, headers) {\n    if (line.indexOf(\"\\r\") !== -1) {\n        throw parseErrorCode(\"HPE_LF_EXPECTED\");\n    }\n    var match = headerExp.exec(line);\n    var k = match && match[1];\n    if (k) {\n        headers.push(k);\n        headers.push(match[2]);\n    } else {\n        var matchContinue = headerContinueExp.exec(line);\n        if (matchContinue && headers.length) {\n            if (headers[headers.length - 1]) {\n                headers[headers.length - 1] += \" \";\n            }\n            headers[headers.length - 1] += matchContinue[1];\n        }\n    }\n};\nvar requestExp = /^([A-Z-]+) ([^ ]+) HTTP\\/(\\d)\\.(\\d)$/;\nHTTPParser.prototype.REQUEST_LINE = function() {\n    var line = this.consumeLine();\n    if (!line) {\n        return;\n    }\n    var match = requestExp.exec(line);\n    if (match === null) {\n        throw parseErrorCode(\"HPE_INVALID_CONSTANT\");\n    }\n    this.info.method = this._compatMode0_11 ? match[1] : methods.indexOf(match[1]);\n    if (this.info.method === -1) {\n        throw new Error(\"invalid request method\");\n    }\n    this.info.url = match[2];\n    this.info.versionMajor = +match[3];\n    this.info.versionMinor = +match[4];\n    this.body_bytes = 0;\n    this.state = \"HEADER\";\n};\nvar responseExp = /^HTTP\\/(\\d)\\.(\\d) (\\d{3}) ?(.*)$/;\nHTTPParser.prototype.RESPONSE_LINE = function() {\n    var line = this.consumeLine();\n    if (!line) {\n        return;\n    }\n    var match = responseExp.exec(line);\n    if (match === null) {\n        throw parseErrorCode(\"HPE_INVALID_CONSTANT\");\n    }\n    this.info.versionMajor = +match[1];\n    this.info.versionMinor = +match[2];\n    var statusCode = this.info.statusCode = +match[3];\n    this.info.statusMessage = match[4];\n    // Implied zero length.\n    if ((statusCode / 100 | 0) === 1 || statusCode === 204 || statusCode === 304) {\n        this.body_bytes = 0;\n    }\n    this.state = \"HEADER\";\n};\nHTTPParser.prototype.shouldKeepAlive = function() {\n    if (this.info.versionMajor > 0 && this.info.versionMinor > 0) {\n        if (this.connection.indexOf(\"close\") !== -1) {\n            return false;\n        }\n    } else if (this.connection.indexOf(\"keep-alive\") === -1) {\n        return false;\n    }\n    if (this.body_bytes !== null || this.isChunked) {\n        return true;\n    }\n    return false;\n};\nHTTPParser.prototype.HEADER = function() {\n    var line = this.consumeLine();\n    if (line === undefined) {\n        return;\n    }\n    var info = this.info;\n    if (line) {\n        this.parseHeader(line, info.headers);\n    } else {\n        var headers = info.headers;\n        var hasContentLength = false;\n        var currentContentLengthValue;\n        var hasUpgradeHeader = false;\n        for(var i = 0; i < headers.length; i += 2){\n            switch(headers[i].toLowerCase()){\n                case \"transfer-encoding\":\n                    this.isChunked = headers[i + 1].toLowerCase() === \"chunked\";\n                    break;\n                case \"content-length\":\n                    currentContentLengthValue = +headers[i + 1];\n                    if (hasContentLength) {\n                        // Fix duplicate Content-Length header with same values.\n                        // Throw error only if values are different.\n                        // Known issues:\n                        // https://github.com/request/request/issues/2091#issuecomment-328715113\n                        // https://github.com/nodejs/node/issues/6517#issuecomment-216263771\n                        if (currentContentLengthValue !== this.body_bytes) {\n                            throw parseErrorCode(\"HPE_UNEXPECTED_CONTENT_LENGTH\");\n                        }\n                    } else {\n                        hasContentLength = true;\n                        this.body_bytes = currentContentLengthValue;\n                    }\n                    break;\n                case \"connection\":\n                    this.connection += headers[i + 1].toLowerCase();\n                    break;\n                case \"upgrade\":\n                    hasUpgradeHeader = true;\n                    break;\n            }\n        }\n        // if both isChunked and hasContentLength, isChunked wins\n        // This is required so the body is parsed using the chunked method, and matches\n        // Chrome's behavior.  We could, maybe, ignore them both (would get chunked\n        // encoding into the body), and/or disable shouldKeepAlive to be more\n        // resilient.\n        if (this.isChunked && hasContentLength) {\n            hasContentLength = false;\n            this.body_bytes = null;\n        }\n        // Logic from https://github.com/nodejs/http-parser/blob/921d5585515a153fa00e411cf144280c59b41f90/http_parser.c#L1727-L1737\n        // \"For responses, \"Upgrade: foo\" and \"Connection: upgrade\" are\n        //   mandatory only when it is a 101 Switching Protocols response,\n        //   otherwise it is purely informational, to announce support.\n        if (hasUpgradeHeader && this.connection.indexOf(\"upgrade\") != -1) {\n            info.upgrade = this.type === HTTPParser.REQUEST || info.statusCode === 101;\n        } else {\n            info.upgrade = info.method === method_connect;\n        }\n        if (this.isChunked && info.upgrade) {\n            this.isChunked = false;\n        }\n        info.shouldKeepAlive = this.shouldKeepAlive();\n        //problem which also exists in original node: we should know skipBody before calling onHeadersComplete\n        var skipBody;\n        if (compatMode0_12) {\n            skipBody = this.userCall()(this[kOnHeadersComplete](info));\n        } else {\n            skipBody = this.userCall()(this[kOnHeadersComplete](info.versionMajor, info.versionMinor, info.headers, info.method, info.url, info.statusCode, info.statusMessage, info.upgrade, info.shouldKeepAlive));\n        }\n        if (skipBody === 2) {\n            this.nextRequest();\n            return true;\n        } else if (this.isChunked && !skipBody) {\n            this.state = \"BODY_CHUNKHEAD\";\n        } else if (skipBody || this.body_bytes === 0) {\n            this.nextRequest();\n            // For older versions of node (v6.x and older?), that return skipBody=1 or skipBody=true,\n            //   need this \"return true;\" if it's an upgrade request.\n            return info.upgrade;\n        } else if (this.body_bytes === null) {\n            this.state = \"BODY_RAW\";\n        } else {\n            this.state = \"BODY_SIZED\";\n        }\n    }\n};\nHTTPParser.prototype.BODY_CHUNKHEAD = function() {\n    var line = this.consumeLine();\n    if (line === undefined) {\n        return;\n    }\n    this.body_bytes = parseInt(line, 16);\n    if (!this.body_bytes) {\n        this.state = \"BODY_CHUNKTRAILERS\";\n    } else {\n        this.state = \"BODY_CHUNK\";\n    }\n};\nHTTPParser.prototype.BODY_CHUNK = function() {\n    var length = Math.min(this.end - this.offset, this.body_bytes);\n    this.userCall()(this[kOnBody](this.chunk, this.offset, length));\n    this.offset += length;\n    this.body_bytes -= length;\n    if (!this.body_bytes) {\n        this.state = \"BODY_CHUNKEMPTYLINE\";\n    }\n};\nHTTPParser.prototype.BODY_CHUNKEMPTYLINE = function() {\n    var line = this.consumeLine();\n    if (line === undefined) {\n        return;\n    }\n    assert.equal(line, \"\");\n    this.state = \"BODY_CHUNKHEAD\";\n};\nHTTPParser.prototype.BODY_CHUNKTRAILERS = function() {\n    var line = this.consumeLine();\n    if (line === undefined) {\n        return;\n    }\n    if (line) {\n        this.parseHeader(line, this.trailers);\n    } else {\n        if (this.trailers.length) {\n            this.userCall()(this[kOnHeaders](this.trailers, \"\"));\n        }\n        this.nextRequest();\n    }\n};\nHTTPParser.prototype.BODY_RAW = function() {\n    var length = this.end - this.offset;\n    this.userCall()(this[kOnBody](this.chunk, this.offset, length));\n    this.offset = this.end;\n};\nHTTPParser.prototype.BODY_SIZED = function() {\n    var length = Math.min(this.end - this.offset, this.body_bytes);\n    this.userCall()(this[kOnBody](this.chunk, this.offset, length));\n    this.offset += length;\n    this.body_bytes -= length;\n    if (!this.body_bytes) {\n        this.nextRequest();\n    }\n};\n// backward compat to node < 0.11.6\n[\n    \"Headers\",\n    \"HeadersComplete\",\n    \"Body\",\n    \"MessageComplete\"\n].forEach(function(name) {\n    var k = HTTPParser[\"kOn\" + name];\n    Object.defineProperty(HTTPParser.prototype, \"on\" + name, {\n        get: function() {\n            return this[k];\n        },\n        set: function(to) {\n            // hack for backward compatibility\n            this._compatMode0_11 = true;\n            method_connect = \"CONNECT\";\n            return this[k] = to;\n        }\n    });\n});\nfunction parseErrorCode(code) {\n    var err = new Error(\"Parse Error\");\n    err.code = code;\n    return err;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http-parser-js/http-parser.js\n");

/***/ })

};
;